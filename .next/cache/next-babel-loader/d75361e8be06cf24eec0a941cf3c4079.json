{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/nathanielcho/Projects/voter-package/components/Comments.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport Layout from \"../components/Layout\"; // import useSWR from 'swr';\n// function fetcher(url) {\n//   return fetch(url).then(r => r.json());\n// }\n\nfunction Comments(props) {\n  // const { data, error } = useSWR('/api/comments', fetcher);\n  // console.log(data)\n  // console.error(error)\n  return __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, \"Comments\");\n}\n\nexport function getServerSideProps(_ref) {\n  var req, params, protocol, host, commentsURL, res, data;\n  return _regeneratorRuntime.async(function getServerSideProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref.req, params = _ref.params;\n          protocol = req ? \"\".concat(req.headers['x-forwarded-proto'], \":\") : location.protocol;\n          host = req ? req.headers['x-forwarded-host'] : location.host;\n          commentsURL = \"\".concat(protocol, \"//\").concat(host, \"/api/comments?post_id=\").concat(params.postId);\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(commentsURL));\n\n        case 6:\n          res = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 9:\n          data = _context.sent;\n          console.log(data);\n          return _context.abrupt(\"return\", {\n            props: {\n              data: data\n            }\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport default Comments;","map":{"version":3,"sources":["/Users/nathanielcho/Projects/voter-package/components/Comments.js"],"names":["fetch","Layout","Comments","props","getServerSideProps","req","params","protocol","headers","location","host","commentsURL","postId","res","json","data","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CACA;AAEA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA;AACA;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD;;AAED,OAAO,SAAeC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoCC,UAAAA,GAApC,QAAoCA,GAApC,EAAyCC,MAAzC,QAAyCA,MAAzC;AACCC,UAAAA,QADD,GACYF,GAAG,aACbA,GAAG,CAACG,OAAJ,CAAY,mBAAZ,CADa,SAEhBC,QAAQ,CAACF,QAHR;AAICG,UAAAA,IAJD,GAIQL,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,kBAAZ,CAAH,GAAqCC,QAAQ,CAACC,IAJzD;AAKCC,UAAAA,WALD,aAKkBJ,QALlB,eAK+BG,IAL/B,mCAK4DJ,MAAM,CAACM,MALnE;AAAA;AAAA,2CAMaZ,KAAK,CAACW,WAAD,CANlB;;AAAA;AAMCE,UAAAA,GAND;AAAA;AAAA,2CAScA,GAAG,CAACC,IAAJ,EATd;;AAAA;AASCC,UAAAA,IATD;AAULC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAVK,2CAWE;AACLZ,YAAAA,KAAK,EAAE;AAAEY,cAAAA,IAAI,EAAJA;AAAF;AADF,WAXF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,eAAeb,QAAf","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport Layout from \"../components/Layout\";\n// import useSWR from 'swr';\n\n// function fetcher(url) {\n//   return fetch(url).then(r => r.json());\n// }\n\nfunction Comments(props) {\n  // const { data, error } = useSWR('/api/comments', fetcher);\n  // console.log(data)\n  // console.error(error)\n  return (\n    <span>Comments</span>\n  );\n}\n\nexport async function getServerSideProps({ req, params }) {\n  const protocol = req\n    ? `${req.headers['x-forwarded-proto']}:`\n    : location.protocol\n  const host = req ? req.headers['x-forwarded-host'] : location.host\n  const commentsURL = `${protocol}//${host}/api/comments?post_id=${params.postId}`\n  const res = await fetch(commentsURL);\n  // await fetch('/api/comments');\n  // const res = await fetch('/api/comments');\n  const data = await res.json()\n  console.log(data);\n  return {\n    props: { data }\n  };\n}\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}